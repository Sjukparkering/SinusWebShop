
@page "/CartPage"
@using SinusWebShop.Models
@using SinusWebShop.Managers
@using System.Text.Json;
@using Microsoft.JSInterop;
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using System.Text.RegularExpressions

<style>
    .empty-cart {
        text-align: center;
        margin-top: 50px;
    }

        .empty-cart h1 {
            font-size: 24px;
            color: #555;
        }

            .empty-cart h1::before {
                content: " ";
                display: block;
                width: 50px;
                height: 50px;
                margin: 0 auto 20px;
                background: url('sad-smiley.png') no-repeat;
                background-size: cover;
            }
</style>


<h3></h3>

@if (CartManager.Cart.Any())
{
    <ul>
        @foreach (Product product in CartManager.Cart)
        {
            <li>
                <h3>@product.Title</h3>
                <p><strong>Price:</strong><em> $ @product.Price</em></p>
                <button @onclick="() => RemoveFromCart(product)" class="btn btn-danger">Remove</button>
            </li>
        }
    </ul>

    <h3>Total: @CartManager.GetTotalPrice()</h3>

    <div class="checkout-form">
        <h3>Checkout</h3>
        <form>
            <fieldset>
                <legend>Personal Information</legend>
                <div class="form-group">
                    <label for="firstName">First Name:</label>
                    <input type="text" id="firstName" @bind="User.FirstName" class="form-control" required pattern="[A-Za-zÄäÖöÅå\s]+" title="Only letters are allowed">
                </div>

                <div class="form-group">
                    <label for="lastName">Last Name:</label>
                    <input type="text" id="lastName" @bind="User.LastName" class="form-control" required pattern="[A-Za-zÄäÖöÅå\s]+" title="Only letters are allowed">
                </div>

                <div class="form-group">
                    <label for="address">Address:</label>
                    <input type="text" id="address" @bind="User.Address" class="form-control" required>
                </div>
            </fieldset>

            <fieldset>
                <legend>Payment Information</legend>
                <div class="form-group">
                    <label for="cardName">Cardholder Name:</label>
                    <input type="text" id="cardName" @bind="User.CardHolderName" class="form-control" required pattern="[A-Za-zÄäÖöÅå\s]+" title="Only letters are allowed">
                </div>

                <div class="form-group">
                    <label for="cardNumber">Card Number:</label>
                    <input type="text" id="cardNumber" @bind="User.CardNumber" class="form-control" required pattern="[0-9]{16}" title="Only 16 digits are allowed">
                </div>

                <div class="form-group">
                    <label for="cvc">CVC:</label>
                    <input type="text" id="cvc" @bind="User.CVC" class="form-control" required pattern="[0-9]{3}" title="Only 3 digits are allowed">
                </div>
            </fieldset>

            <button @onclick="ConfirmPurchase" class="btn btn-primary">Confirm Purchase</button>
        </form>
    </div>
}
else
{
<div class="empty-cart">
    <h1>Cart is empty... 😞</h1>
</div>
}

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private UserInformation User { get; set; } = new UserInformation();


    private bool IsValid =>
        !string.IsNullOrWhiteSpace(User.FirstName) &&
        Regex.IsMatch(User.FirstName, @"^[A-Za-zÄäÖöÅå\s]+$") &&
        !string.IsNullOrWhiteSpace(User.LastName) &&
        Regex.IsMatch(User.LastName, @"^[A-Za-zÄäÖöÅå\s]+$") &&
        !string.IsNullOrWhiteSpace(User.Address) &&
        !string.IsNullOrWhiteSpace(User.CardHolderName) &&
        Regex.IsMatch(User.CardHolderName, @"^[A-Za-zÄäÖöÅå\s]+$") &&
        !string.IsNullOrWhiteSpace(User.CardNumber) &&
        User.CardNumber.Length == 16 && 
        Regex.IsMatch(User.CardNumber, @"^\d+$") && 
        !string.IsNullOrWhiteSpace(User.CVC) &&
        User.CVC.Length == 3 && 
        Regex.IsMatch(User.CVC, @"^\d+$"); 


    private void RemoveFromCart(Product product)
    {
        CartManager.RemoveFromCart(product);
    }

    private async Task ConfirmPurchase()
    {
        if (IsValid)
        {
            
            await SaveUserData();

            
            NavigationManager.NavigateTo("/OrderConfirmationPage");
        }
        else
        {
            
            Console.WriteLine("Please fill in all required fields.");
        }
    }





    private async Task SaveUserData()
    {

        var serializedUser = JsonSerializer.Serialize(User);
        JSRuntime.InvokeVoidAsync("localStorage.setItem", "userInformation", serializedUser);
    }

}

