@page "/category/{categoryName}"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@using SinusWebShop.Models
@using System.Net.Http.Json

<h1>@(CategoryName != null ? CategoryName.Substring(0, 1).ToUpper() + CategoryName.Substring(1) : "") products</h1>


<div class="filters">
    <div class="filter">
        <label for="brand-select">Brand:</label>
        <select id="brand-select" @bind="SelectedBrand">
            <option value="">All Brands</option>
            @foreach (var brand in ProductBrands)
            {
                <option value="@brand">@brand</option>
            }
        </select>
    </div>
    <div class="filter">
        <label for="price-select">Price Range:</label>
        <select id="price-select" @bind="SelectedPriceRange">
            <option value="">All Prices</option>
            @foreach (var priceRange in PriceRanges)
            {
                <option value="@priceRange">@priceRange</option>
            }
        </select>
    </div>
    <button class="apply-button" @onclick="ApplyFilters">Apply Filters</button>
</div>

@if (Products != null && Products.Any())
{
    <div class="product-grid">
        @foreach (var product in FilteredProducts)
        {
            <div class="product-card">
                <img src="@product.Thumbnail" alt="@product.Title" />
                <div class="product-details">
                    <h3>@product.Title</h3>
                    <p>Price: @product.Price</p>
                    <button class="details-button" @onclick="() => NavigateToProductDetails(product.Id)">View Details</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No products found for @CategoryName category.</p>
}

@code {
    [Parameter]
    public string? CategoryName { get; set; }
    public List<Product> Products { get; set; } = new();
    public List<Product> FilteredProducts { get; set; } = new();
    public string? ErrorMessage { get; set; }
    public string? SelectedBrand { get; set; }
    public string? SelectedPriceRange { get; set; }
    public List<string> ProductBrands { get; set; } = new();
    public List<string> PriceRanges { get; set; } = new();

    [Inject]
    public HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Root result = await HttpClient.GetFromJsonAsync<Root>("products");
            if (result != null)
            {
                Products = result.Products.Where(p => p.Category == CategoryName).ToList();
                ProductBrands = Products.Select(p => p.Brand).Distinct().ToList();
                PriceRanges = Products.Select(p => p.Price).Distinct().Select(price => $"{price}-{price + 50}").ToList(); // Example price range of $50

                FilterProducts();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void FilterProducts()
    {
        FilteredProducts = Products;

        // Filter by brand
        if (!string.IsNullOrEmpty(SelectedBrand))
        {
            FilteredProducts = FilteredProducts.Where(p => p.Brand == SelectedBrand).ToList();
        }

        // Filter by price
        if (!string.IsNullOrEmpty(SelectedPriceRange))
        {
            var priceRange = SelectedPriceRange.Split('-').Select(int.Parse).ToList();
            FilteredProducts = FilteredProducts.Where(p => p.Price >= priceRange[0] && p.Price <= priceRange[1]).ToList();
        }
    }

    private void ApplyFilters()
    {
        FilterProducts();
    }

    private void NavigateToProductDetails(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }
}

<style>
    .filters {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .filter {
        margin-right: 20px;
    }

    .apply-button {
        background-color: #007bff;
        color: #ffffff;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .apply-button:hover {
            background-color: #0056b3;
        }

    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        grid-gap: 20px;
        justify-items: center;
    }

    .product-card {
        background-color: lightgrey;
        color: black;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease;
    }

        .product-card:hover {
            transform: translateY(-5px);
        }


        .product-card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }

    .product-details {
        padding: 20px;
    }

        .product-details h3 {
            margin-bottom: 10px;
        }

    .details-button {
        background-color: #007bff;
        color: #ffffff;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .details-button:hover {
            background-color: #0056b3;
        }
</style>
